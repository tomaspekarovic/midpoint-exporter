name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

env:
  BINARY_NAME: midpoint_exporter

jobs:
  build:
    name: Build ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: darwin
            goarch: amd64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Test
        run: go test ./...

      - name: Build
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          mkdir -p dist
          OUT="${{ env.BINARY_NAME }}"
          if [ "${GOOS}" = "windows" ]; then OUT="${OUT}.exe"; fi
          LDFLAGS="-s -w -X 'main.version=${VERSION}'"
          go build -trimpath -ldflags "$LDFLAGS" -o "dist/${OUT}" .
          test -s "dist/${OUT}"  # ensure non-empty

      - name: Package
        run: |
          set -euo pipefail
          OS="${{ matrix.goos }}"
          ARCH="${{ matrix.goarch }}"
          VERSION="${{ github.ref_name }}"
          mkdir -p dist/pkgs
          BASENAME="${{ env.BINARY_NAME }}_${VERSION}_${OS}_${ARCH}"
          echo "# ${{ env.BINARY_NAME }} ${VERSION}" > dist/README.release.txt
          echo "Built for ${OS}/${ARCH}" >> dist/README.release.txt

          if [ "${OS}" = "windows" ]; then
            zip -j "dist/pkgs/${BASENAME}.zip" "dist/${{ env.BINARY_NAME }}.exe" dist/README.release.txt
            test -s "dist/pkgs/${BASENAME}.zip"
          else
            tar -C dist -czf "dist/pkgs/${BASENAME}.tar.gz" "${{ env.BINARY_NAME }}" README.release.txt
            test -s "dist/pkgs/${BASENAME}.tar.gz"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/pkgs/*
          if-no-files-found: error

  release:
    name: Publish Release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: release-artifacts-*
          path: artifacts
          merge-multiple: true

      - name: Verify archives exist and are non-empty
        working-directory: artifacts
        run: |
          set -euo pipefail
          shopt -s nullglob
          files=(*.tar.gz *.zip)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No release archives found"; exit 1
          fi
          # ensure none are zero bytes
          for f in "${files[@]}"; do
            test -s "$f" || { echo "Empty file: $f"; exit 1; }
          done

      - name: Generate SHA256SUMS (only for existing archives)
        id: sums
        working-directory: artifacts
        run: |
          set -euo pipefail
          sha256sum *.tar.gz *.zip > SHA256SUMS
          test -s SHA256SUMS

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          files: |
            artifacts/*.tar.gz
            artifacts/*.zip
            artifacts/SHA256SUMS
          generate_release_notes: true
