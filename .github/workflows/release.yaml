name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write    # needed to create GitHub Releases
  packages: write    # (optional) for GHCR if you enable the image job
  id-token: write    # (optional) for future provenance/SLSA

env:
  BINARY_NAME: midpoint_exporter

jobs:
  build:
    name: Build ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: darwin
            goarch: amd64   # remove this line if you want darwin/amd64 too
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Run tests
        run: go test ./...

      - name: Build
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ github.ref_name }}
        run: |
          # If you define 'var version = "dev"' in package main, this will embed the tag:
          LDFLAGS="-s -w -X 'main.version=${VERSION}'"
          OUT="${{ env.BINARY_NAME }}"
          if [ "${GOOS}" = "windows" ]; then OUT="${OUT}.exe"; fi
          go build -trimpath -ldflags "$LDFLAGS" -o "dist/${OUT}" .

      - name: Package
        run: |
          set -e
          OS="${{ matrix.goos }}"
          ARCH="${{ matrix.goarch }}"
          VERSION="${{ github.ref_name }}"

          mkdir -p dist/pkgs
          BASENAME="${{ env.BINARY_NAME }}_${VERSION}_${OS}_${ARCH}"

          # Include minimal README note; adjust if you have a real README/LICENSE in repo.
          echo "# ${{ env.BINARY_NAME }} ${VERSION}" > dist/README.release.txt
          echo "Built for ${OS}/${ARCH}" >> dist/README.release.txt

          if [ "${OS}" = "windows" ]; then
            zip -j "dist/pkgs/${BASENAME}.zip" "dist/${{ env.BINARY_NAME }}.exe" dist/README.release.txt
          else
            tar -C dist -czf "dist/pkgs/${BASENAME}.tar.gz" "${{ env.BINARY_NAME }}" README.release.txt
          fi

      - name: Generate checksum for package
        working-directory: dist/pkgs
        run: |
          shopt -s nullglob
          for f in *; do
            sha256sum "$f" >> SHA256SUMS
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            dist/pkgs/*
          if-no-files-found: error

  release:
    name: Publish Release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: release-artifacts-*
          path: artifacts
          merge-multiple: true

      - name: Collate checksums
        working-directory: artifacts
        run: |
          cat */SHA256SUMS > SHA256SUMS || true
          # dedupe if multiple files exist
          sort -u -o SHA256SUMS SHA256SUMS || true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }} # e.g. v1.2.3-rc1 -> prerelease
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/*.zip
            artifacts/**/SHA256SUMS
          generate_release_notes: true
